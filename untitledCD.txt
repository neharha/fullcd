*********1.Identification of lexical**********

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#define MAX_TOKEN_LENGTH 100

int is_operator(const char* token) {
    return (strcmp(token, "+") == 0 || strcmp(token, "-") == 0 || strcmp(token, "*") == 0 ||
            strcmp(token, "/") == 0 || strcmp(token, "%") == 0 || strcmp(token, "=") == 0 ||
            strcmp(token, "==") == 0 || strcmp(token, "!=") == 0 || strcmp(token, ">") == 0 ||
            strcmp(token, ">=") == 0 || strcmp(token, "<") == 0 || strcmp(token, "<=") == 0);
}

int is_keyword(const char* token) {
    const char* keywords[] = {"if", "else", "while", "for", "switch", "case", "break", "int", "float", "char", "void"};
    int numKeywords = sizeof(keywords) / sizeof(keywords[0]);
    
    for (int i = 0; i < numKeywords; i++) {
        if (strcmp(token, keywords[i]) == 0) {
            return 1;
        }
    }
    return 0;
}

int main() {
    char source_code[10000];
    char token[MAX_TOKEN_LENGTH];
    char ch;
    int tokenIndex = 0;
    
    FILE* infile = fopen("InputFile.c", "r");
    if (infile == NULL) {
        printf("Unable to open file.\n");
        return 1;
    }

    // Read the source code from the file
    int i = 0;
    while ((ch = fgetc(infile)) != EOF) {
        source_code[i] = ch;
        i++;
    }
    source_code[i] = '\0';
    fclose(infile);

    // Tokenize the source code
    i = 0;
    while (source_code[i] != '\0') {
        if (isspace(source_code[i])) {
            if (tokenIndex > 0) {
                token[tokenIndex] = '\0';
                // Process the token
                if (isalpha(token[0]) || token[0] == '_') {
                    printf("%s is an identifier.\n", token);
                } else if (isdigit(token[0])) {
                    printf("%s is a digit.\n", token);
                } else if (strlen(token) == 1 && ispunct(token[0])) {
                    printf("%s is a symbol.\n", token);
                } else if (is_operator(token)) {
                    printf("%s is an operator.\n", token);
                } else if (is_keyword(token)) {
                    printf("%s is a keyword.\n", token);
                }
                tokenIndex = 0;
            }
        } else {
            token[tokenIndex] = source_code[i];
            tokenIndex++;
        }
        i++;
    }

    return 0;
}

***********2.Symbol Table*************

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#define tk_no 50

typedef struct Symbol {
    char name[tk_no];
    char type[tk_no];
    int address;
} Symbol;

int is_operator(char *token) {
    return (strcmp(token, "+") == 0 || strcmp(token, "-") == 0 || strcmp(token, "*") == 0 || strcmp(token, "/") == 0 || 
    strcmp(token, "%d") == 0 || strcmp(token, "=") == 0 || strcmp(token, "==") == 0 || strcmp(token, "!=") == 0 || 
    strcmp(token, ">") == 0 || strcmp(token, ">=") == 0 || strcmp(token, "<") == 0 || strcmp(token, "<=") == 0);
}

int is_keyword(char *token) {
    char *keywords[] = {"auto", "break", "case", "char", "const", "continue", "default", "do", "double", "else", "enum", 
    "extern", "float", "for", "goto", "if", "int", "long", "register", "return", "short", "signed", "sizeof", "static", 
    "struct", "switch", "typedef", "union", "unsigned", "void", "volatile", "while"};

    for (int i = 0; i < sizeof(keywords) / sizeof(keywords[0]); i++) {
        if (strcmp(token, keywords[i]) == 0) {
            return 1;
        }
    }
    return 0;
}

void add_symbol(Symbol *symbol_table, int *symbol_count, char *token, char *type, int address) {
    for (int i = 0; i < *symbol_count; i++) {
        if (strcmp(symbol_table[i].name, token) == 0) {
            return;
        }
    }
    strcpy(symbol_table[*symbol_count].name, token);
    strcpy(symbol_table[*symbol_count].type, type);
    symbol_table[*symbol_count].address = address;
    (*symbol_count)++;
}


void print_symbol_table(Symbol *symbol_table, int symbol_count) {
    printf("symbol_table\n");
    printf("%-20s %-20s %-20s\n", "name", "type", "address");
    for (int i = 0; i < symbol_count; i++) {
        printf("%-20s %-20s %-20d\n", symbol_table[i].name, symbol_table[i].type, symbol_table[i].address);
    }
}

void tokensep(char *source_code, Symbol *symbol_table, int *symbol_count) {
    char *token;
    char *type;
    char *pch;
    int address = 0;

    token = strtok(source_code, " \n\t\r\f\v");
    while (token != NULL) {
        if (isalpha(token[0]) || token[0] == '_') {
            if (strcmp(token, "int") == 0 || strcmp(token, "float") == 0 || strcmp(token, "char") == 0 || strcmp(token, "double") == 0) {
                type = "Type";
            } else if (strcmp(token, "if") == 0 || strcmp(token, "else") == 0 || strcmp(token, "for") == 0 || strcmp(token, "while") == 0) {
                type = "Keyword";
            } else {
                type = "Identifier";
            }
            add_symbol(symbol_table, symbol_count, token, type, address);
        } else if (isdigit(token[0])) {
            type = "Digit";
            add_symbol(symbol_table, symbol_count, token, type, address);
        } else if (token[0] == '"' || token[0] == '\'') {
            type = "String";
            add_symbol(symbol_table, symbol_count, token, type, address);
        } else if (token[0] == '#' && strlen(token) > 1 && isalpha(token[1])) {
            type = "Keyword";
            add_symbol(symbol_table, symbol_count, token, type, address);
        } else if (strlen(token) == 1 && is_operator(token)) {
            type = "Operator";
            add_symbol(symbol_table, symbol_count, token, type, address);
        } else {
            type = "Other";
            add_symbol(symbol_table, symbol_count, token, type, address);
        }

        if (strcmp(type, "Preprocessor Directive") != 0) {
            address++;
        }

        token = strtok(NULL, " \n\t\r\f\v");
    }
}


int main() {
    FILE *fp;
    char *filename = "filename.c";
    char *mode = "r";
    char source_code[1000];
    Symbol symbol_table[100];
    int symbol_count = 0;
    fp = fopen(filename, mode);
    if (fp == NULL) {
        perror("Error while opening the file.\n");
        exit(EXIT_FAILURE);
    }

    while (fgets(source_code, 1000, fp) != NULL) {
        tokensep(source_code, symbol_table, &symbol_count);
    }

    fclose(fp);
    print_symbol_table(symbol_table, symbol_count);
    return 0;
}

*********3.re to nfa*******

//Implementation of Regular Expression to Finite Automata using C.

#include <stdio.h>
#include <string.h>

char mat[20][20];
char ex[25];
int len, st, end, i, j, f, f1, f2, s, cs, c;

void add(char x, char y);
void con(char x, char y);
void close(char x, char y);
void out();

int main()
{
    printf("Enter the Expression: ");
    scanf("%s", ex);
    len = strlen(ex);
    f = 0;
    st = 1;
    f1 = 0;
    end = 2;
    s = 0;
    cs = 1;
    c = 0;
    
    while (c < (len - 1))
    {
        while (ex[c] == '(' && f != 1)
            c++;
        
        if (ex[c + 1] == '/')
        {
            if (f == 1 && ex[c] == ')')
                add(' ', ex[c + 2]);
            else
                add(ex[c], ex[c + 2]);
        }
        else if (ex[c + 1] == '.')
        {
            if (f1 == 1 || f == 1)
            {
                con(' ', ex[c + 2]);
                f = 1;
            }
            else
            {
                con(ex[c], ex[c + 2]);
            }
        }
        else if (ex[c + 1] == '*')
        {
            close(ex[c], ex[c + 2]);
        }
        
        f1 = 1;
        c = c + 1;
    }
    
    out();
    
    return 0;
}

void add(char x, char y)
{
    if (x != ' ' && ex[c] != ')')
        mat[st][end] = x;

    mat[st - 1][end - 1] = 'E';
    mat[st + 2][end + 2] = y;
    mat[st - 1][end + 1] = 'E';
    mat[end][end + 3] = 'E';
    mat[end + 2][end + 3] = 'E';
    
    st = end + 3;
    end = st + 1;
    f = 1;
    
    if (ex[c + 4] != '*')
        cs = st;
    
    c++;
}

void con(char x, char y)
{
    if (f != 1)
    {
        st = 0;
        end = 1;
    }
    
    if (x != ' ')
    {
        mat[st][end] = x;
        st++;
        end++;
        goto l;
    }
    
    if (x != ' ' && ex[c + 2] != '(')
    {
        st++;
        end++;
    }
    
l:
    if (ex[c + 2] != '(')
    {
        mat[st][end] = y;
        st++;
        end++;
    }
    
    st = end;
    end = st + 1;
    
    if (ex[c + 4] != '*' && ex[c + 2] != '(')
        cs = st;
    
    f = 1;
    c++;
}

void close(char x, char y)
{
    if (ex[c + 2] == '\0')
    {
        for (i = 20 - 1; i >= 0; i--)
        {
            mat[i][end] = ' ';
        }
        
        mat[st][end] = x;
        mat[end - 1][st - 1] = 'E';
        mat[st][end + 1] = 'E';
        mat[end][st - 1] = 'E';
        mat[st - 1][end + 1] = 'E';
        mat[end][end + 1] = y;
        mat[end][end + 2] = 'E';
        mat[st - 1][end + 2] = 'E';
        mat[end + 1][end + 2] = 'E';
    }
    else
    {
        if (ex[c + 2] == '/')
        {
            mat[end - 1][st] = 'E';
            mat[st][end + 1] = 'E';
            mat[end][end + 2] = y;
            mat[st][end + 2] = 'E';
            mat[end + 1][end + 2] = 'E';
        }
        else if (ex[c + 2] == '.')
        {
            mat[end - 1][st] = 'E';
            mat[st][end + 1] = 'E';
            mat[end][end + 2] = y;
            mat[st][end + 2] = 'E';
            mat[end + 1][end + 2] = 'E';
            mat[cs][st - 1] = 'E';
            mat[st][end - 1] = 'E';
        }
        
        if (ex[c + 4] == '*')
        {
            mat[st][end] = x;
            mat[end][end + 1] = 'E';
            mat[st - 1][end + 1] = 'E';
            mat[end + 1][end + 1] = 'E';
        }
    }
    
    st = end + 1;
    end = st + 1;
    c++;
    cs = st;
    f = 1;
    s = 1;
}

void out()
{
    printf("\n");
    
    for (i = 0; i < 20; i++)
    {
        if (i < 10)
            printf(" %d ", i);
        else
            printf("%d ", i);
    }
    
    for (i = 0; i < 20; i++)
    {
        printf("\n\n%d ", i);
        
        for (j = 0; j < 20; j++)
        {
            printf(" %c ", mat[i][j]);
        }
    }
    
    printf("\n");
}

*****4.RecursiveDP********

#include <stdio.h>
#include <stdlib.h>

char lookahead;

void error()
{
    printf("Error!");
    exit(0);
}

void match(char x)
    {
        if (lookahead==x)
        {
            lookahead = getchar();
        } else
        {
            error();
        }
    }

void E()
{
    T();
    Ed();
}

void Ed()
{
    if(lookahead=='+')
    {
        match('+');
        T();
        Ed();
    }
    else{
        NULL;
    }
}

void F()
{
    if(lookahead=='i'){
        match('i');
    }
    else if(lookahead=='(')
    {
        match('(');
        E();
        if(lookahead==')')
        {
            match(')');
        }else{
            error();
        }
    }
    else{
        error();
    }
}

void T()
{
    F();
    Td();
}

void Td()
    {
    if(lookahead=='*')
    {
        match('*');
        F();
        Td();
    }
    else{
        NULL;
    }
}


int main()
{
    printf("Enter the string with $ at the end:\n");
    lookahead = getchar();
    E();
    if(lookahead =='$'){
        printf("\nParsing is Succesfull!");
    }
    else{
        printf("Invalid Input!!");
    }
}

*******5.simle lex**********

//extracthtml:

%{
#include <stdio.h>
int yywrap(void);
%}

%%
"<"[^>]*">"	{ printf("%s\n", yytext); }
.|\n		{ /* Ignore all other characters */ }
%%

int yywrap(void) {
	return 1;
}

int main(int argc, char** argv) { 
	if (argc < 2) {
	printf("Usage: %s <input_file>\n", argv[0]); 
	return 1;
	}

	FILE* file = fopen(argv[1], "r");
	if (file == NULL) { 
		printf("Error opening the file.\n"); 
		return 1;
	}
	yyin = file;
	yylex();
	fclose(file);
	return 0;
}

//freq_count:

%{
#include <stdio.h> 
#include <string.h>
int freq = 0; 
extern FILE* yyin;
int yywrap(void);
%}

%%
.|\n	{ fputs (yytext, yyout); }
%%

int yywrap(void) { 
	return 1;
}

int main() {
	printf("Enter the filename: "); 
	char filename [100];
	fgets(filename, sizeof(filename), stdin);
	filename[strcspn(filename, "\n")] = '\0';

	FILE* input_file = fopen(filename, "r");
	if (input_file == NULL) { 
		printf("Error in opening the file.\n"); 
		return 1;
	}

	FILE* temp_file = tmpfile();
	if (temp_file == NULL) { 
		printf("Error creating temporary file. \n"); 
		fclose(input_file); 
		return 1;
	}

	
	yyin = input_file;
	yyout = temp_file;
	yylex();

	rewind (temp_file);

	char word[100]; 
	printf("Enter the word to count: "); 
	fgets(word, sizeof(word), stdin); 
	word[strcspn (word, "\n")] = '\0';

	char line [1000];
	while (fgets(line, sizeof(line), temp_file)) { 
		char* token = strtok (line," \t\n"); 
		while (token != NULL) {
			if (strcmp(token, word) == 0) { 
				freq++;
			}
			token = strtok (NULL, "\t\n");
		}
	}
	fclose(input_file);
	fclose(temp_file);
	printf("Frequency of '%s': %d\n", word, freq);
	return 0;
}

//urlchecker:

%{
#include <stdio.h>
#include <stdlib.h>
%}

%%
((http[s]?|ftp):\/\/)?[a-zA-Z0-9]+\.[a-zA-Z0-9]+\.[a-zA-Z0-9]+(\/[a-zA-Z0-9+=?#&_-])	{	printf("\nValid URL\n"); }
.|\n	{	printf("\nInvalid URL\n"); }
%%

int yywrap(){
	return 1;
}

int main() {
    printf("Enter URL: ");
    yylex();
    printf("\n");
    return 0;
}



*******7.calci lex prg******



%{
#include "y.tab.h" 
%}

%%
[0-9]+		{yylval = atoi(yytext); return NUMBER; } 
[ \t]		; /* Skip whitespace */
.		{ return yytext[0]; }
%%

int yywrap() { 
	return 1;
}

//yacc

%{
#include <stdio.h>
extern int yylex();
extern int yyparse();
void yyerror(char *s); 
%}

%token NUMBER

%%
statement: expr		{ printf("Result: %d\n", $1); }
	;

expr: expr '+' term	{ $$ = $1 + $3; }
    | expr '-' term	{ $$ = $1 - $3; } 
    | term		{ $$ = $1; }
    ;

term: term '*' factor	{ $$ = $1 * $3; }
    | term '/' factor   { $$ = $1 / $3; }
    | factor		{ $$ = $1; }
    ;

factor: NUMBER		{ $$ = $1; }
      | '(' expr ')'	{ $$ = $2; }
      ;
%%

int main() {
	yyparse(); 
	return 0;
}

void yyerror(char *s) {
	fprintf(stderr, "Error: %s\n", s);
}

*******8.infix2postfix******

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#define MAX_EXPR_SIZE 100

struct StackNode
{
    int data;
    struct StackNode* next;
};

struct StackNode* createNode(int data)
{
    struct StackNode* newNode = (struct StackNode*)malloc(sizeof(struct StackNode));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

void push(struct StackNode** top, int data)
{
    struct StackNode* newNode = createNode(data);
    newNode->next = *top;
    *top = newNode;
}

int pop(struct StackNode** top)
{
    if (*top == NULL)
        return -1;

    struct StackNode* temp = *top;
    int popped = temp->data;
    *top = (*top)->next;
    free(temp);
    return popped;
}

int peek(struct StackNode* top)
{
    if (top == NULL)
        return -1;
    return top->data;
}

int isEmpty(struct StackNode* top)
{
    return top == NULL;
}

int getPrecedence(char operator)
{
    switch (operator)
    {
        case '+':
        case '-':
            return 1;
        case '*':
        case '/':
            return 2;
        default:
            return -1;
    }
}

int isOperator(char ch)
{
    return (ch == '+' || ch == '-' || ch == '*' || ch == '/');
}

char* infixToPostfix(char* infix)
{
    int i, j;
    int len = strlen(infix);
    char* postfix = (char*)malloc(sizeof(char) * (len + 2));
    struct StackNode* stack = NULL;

    for (i = 0, j = 0; i < len; i++)
    {
        if (infix[i] == ' ' || infix[i] == '\t')
            continue;

        if (isalnum(infix[i]))
        {
            postfix[j++] = infix[i];
        }
        else if (infix[i] == '(')
        {
            push(&stack, infix[i]);
        }
        else if (infix[i] == ')')
        {
            while (!isEmpty(stack) && peek(stack) != '(')
                postfix[j++] = pop(&stack);

            if (!isEmpty(stack) && peek(stack) != '(')
                return "Invalid Expression";
            else
                pop(&stack);
        }
        else if (isOperator(infix[i]))
        {
            while (!isEmpty(stack) && getPrecedence(peek(stack)) >= getPrecedence(infix[i]))
                postfix[j++] = pop(&stack);

            push(&stack, infix[i]);
        }
    }

    while (!isEmpty(stack))
    {
        if (peek(stack) == '(')
        {
            return "Invalid Expression";
        }
        postfix[j++] = pop(&stack);
    }

    postfix[j] = '\0';
    return postfix;
}

void printInstruction(char oper)
{
    if (oper == '+')
    {
        printf("ADD ");
    }
    else if (oper == '-')
    {
        printf("SUB ");
    }
    else if (oper == '*')
    {
        printf("MUL ");
    }
    else if (oper == '/')
    {
        printf("DIV ");
    }
}

int isAlpha(char c)
{
    return (c >= 65 && c <= 90) || (c >= 97 && c <= 122);
}

void printValue(char c)
{
    if (isAlpha(c))
    {
        printf("%c ", c);
    }
    else
    {
        printf("t%d ", c + 1);
    }
}

int main()
{
    char infix[MAX_EXPR_SIZE];
    printf("Enter an infix expression: ");
    fgets(infix, MAX_EXPR_SIZE, stdin);
    char* postfix = infixToPostfix(infix);
    printf("Postfix expression: %s\n", postfix);
    int n = strlen(postfix);
    int count = 0;
    char t1, t2;
    char quad[50][4];
    struct StackNode* top = NULL;

    for (int i = 0; i < n; i++)
    {
        if (isalnum(postfix[i]))
        {
            push(&top, postfix[i]);
        }
        else
        {
            t1 = pop(&top);
            t2 = pop(&top);
            quad[count][0] = count;
            quad[count][1] = postfix[i];
            quad[count][2] = t2;
            quad[count][3] = t1;
            push(&top, count);
            count++;
        }
    }

    printf("-----Quadruple table-----\n");
    for (int i = 0; i < count; i++)
    {
        printf("%d) ", i);
        printf("%c ", quad[i][1]);
        printValue(quad[i][2]);
        printValue(quad[i][3]);
        printf("t%d\n", i + 1);
    }

    top = NULL;
    int reg_count = 0;
    for (int i = 0; i < count; i++)
    {
        if (isAlpha(quad[i][2]))
        {
            printf("MOV R%d, %c\n", reg_count, quad[i][2]);
            push(&top, reg_count);
            reg_count++;
        }
        if (isAlpha(quad[i][3]))
        {
            printf("MOV R%d, %c\n", reg_count, quad[i][3]);
            push(&top, reg_count);
            reg_count++;
        }
        printInstruction(quad[i][1]);
        t1 = pop(&top);
        t2 = pop(&top);
        printf("R%d, R%d, R%d\n", reg_count, t2, t1);
        push(&top, reg_count);
        reg_count++;
    }

    return 0;
}